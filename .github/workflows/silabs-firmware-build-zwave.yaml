name: Single firmware build

on:
  workflow_call:
    inputs:
      image_name:
        required: false
        type: string
        default: "ghcr.io/${{ github.repository_owner }}/silabs-firmware-builder:${{ inputs.sdk_version }}"
      firmware_name:
        required: true
        type: string
      project_file:
        required: true
        type: string
      project_name:
        required: true
        type: string
      device:
        required: true
        type: string
      components:
        required: false
        type: string
      configuration:
        required: false
        type: string
      patchpath:
        required: false
        type: string
      sdkpatchpath:
        required: false
        type: string
      extra_c_defs:
        required: false
        type: string
      sdk_version:
        required: true
        type: string
      metadata_fw_type:
        required: true
        type: string
      metadata_extra:
        required: false
        default: "null"
        type: string
      gbl_compression:
        required: true
        type: string
      gbl_sign_key:
        required: false
        type: string
      gbl_enc_key:
        required: false
        type: string
      
jobs:
  firmware-build:
    name: Build firmware
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image_name }}
      options: --user root
    defaults:
      run:
        shell: su --shell=/bin/bash builder {0}
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Adjust permission
        shell: bash
        run: chown builder .
      - name: Generate Firmware Project
        run: |
          slc generate \
              --with="${{ inputs.device }},${{ inputs.components }}" \
              --project-file="${{ inputs.project_file }}" \
              --output-type="makefile" \
              --export-destination="$PWD/${{ inputs.firmware_name }}" \
              --copy-proj-sources --copy-sdk-sources --new-project --force \
              --configuration="${{ inputs.configuration }}"

      - name: Patch Firmware
        if: "${{ inputs.patchpath != '' }}"
        run: |
          cd ${{ inputs.firmware_name }}
          for patch in "../${{ inputs.patchpath }}"/*.patch
          do
              echo "Applying ${patch}"
              patch -p1 < $patch
          done

      - name: Patch SDK
        if: "${{ inputs.sdkpatchpath != '' }}"
        run: |
          cd ${{ inputs.firmware_name }}/gecko_sdk_${{ inputs.sdk_version }}
          for patch in "../../${{ inputs.sdkpatchpath }}"/*.patch
          do
              echo "Applying ${patch}"
              patch -p1 < $patch
          done

      - name: Patch Makefile
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          cd ${{ inputs.firmware_name }}
          echo "POST_BUILD_EXE = $PWD/${{ inputs.firmware_name }}/postbuild.sh"
          sed -i "s/^C_DEFS\s*=.*$/C_DEFS = ${{ inputs.extra_c_defs }}/" \
            "${{ inputs.project_name }}.Makefile"
          sed -i 's#^POST_BUILD_EXE_LINUX = .*$#POST_BUILD_EXE_LINUX = true#' \
            "${{ inputs.project_name }}.Makefile"

      - name: Build Firmware
        run: |
          cd ${{ inputs.firmware_name }}
          make -f ${{ inputs.project_name }}.Makefile release
      - name: Add Firmware Metadata
        run: |
          cd ${{ inputs.firmware_name }}
          jq --null-input \
             '{
                "metadata_version": 1,
                "sdk_version": "${{ inputs.sdk_version }}",
                "fw_type": "${{ inputs.metadata_fw_type }}"
              } + ${{ inputs.metadata_extra }}' >  version.json

      - name: Generate gbl Firmware
        run: |
          cd ${{ inputs.firmware_name }}
          if [ -n "${{ inputs.gbl_sign_key }}" ] ; then
            SIGN_KEY="--sign ${{ inputs.gbl_sign_key }}"
          fi
          if [ -n "${{ inputs.gbl_enc_key }}" ] ; then
            ENC_KEY="--encrypt ${{ inputs.gbl_enc_key }}"
          fi
          commander gbl create build/release/${{ inputs.firmware_name }}.gbl \
                    --app build/release/${{ inputs.project_name }}.hex \
                    $SIGN_KEY $ENC_KEY \
                    --compress ${{ inputs.gbl_compression }}

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ inputs.firmware_name }}
          path: ${{ inputs.firmware_name }}/build/release/${{ inputs.firmware_name }}.gbl
